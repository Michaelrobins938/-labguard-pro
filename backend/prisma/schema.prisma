// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for lab personnel
model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  firstName         String
  lastName          String
  role              UserRole @default(TECHNICIAN)
  isActive          Boolean  @default(true)
  emailVerified     Boolean  @default(false)
  lastLoginAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?

  // Relations
  laboratoryId      String
  laboratory        Laboratory @relation(fields: [laboratoryId], references: [id])
  
  equipment         Equipment[]
  calibrationRecords CalibrationRecord[]
  complianceReports ComplianceReport[]
  notifications     Notification[]
  usageLogs        UsageLog[]

  @@map("users")
}

// Laboratory model for multi-tenant support
model Laboratory {
  id                String   @id @default(cuid())
  name              String
  description       String?
  address           String?
  phone             String?
  email             String?
  website           String?
  isActive          Boolean  @default(true)
  subscriptionPlan  SubscriptionPlan @default(STARTER)
  trialEndsAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?

  // Relations
  users             User[]
  equipment         Equipment[]
  complianceTemplates ComplianceTemplate[]
  complianceReports ComplianceReport[]
  subscriptions    Subscription[]

  @@map("laboratories")
}

// Equipment model for lab instruments
model Equipment {
  id                String   @id @default(cuid())
  name              String
  model             String?
  serialNumber      String?
  manufacturer      String?
  equipmentType     EquipmentType
  location          String?
  status            EquipmentStatus @default(ACTIVE)
  lastCalibratedAt  DateTime?
  nextCalibrationAt DateTime?
  calibrationIntervalDays Int @default(365)
  accuracy          Float?
  precision         Float?
  specifications    Json?
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?

  // Relations
  laboratoryId      String
  laboratory        Laboratory @relation(fields: [laboratoryId], references: [id])
  
  assignedToId      String?
  assignedTo        User? @relation(fields: [assignedToId], references: [id])
  
  calibrationRecords CalibrationRecord[]
  complianceReports ComplianceReport[]

  @@map("equipment")
}

// Calibration records for equipment validation
model CalibrationRecord {
  id                String   @id @default(cuid())
  equipmentId       String
  performedById     String
  calibrationDate   DateTime
  nextCalibrationDate DateTime
  method            String
  standardUsed      String?
  temperature       Float?
  humidity          Float?
  pressure          Float?
  
  // Calibration results
  accuracy          Float?
  precision         Float?
  linearity         Float?
  repeatability     Float?
  sensitivity       Float?
  
  // Compliance status
  isCompliant       Boolean
  complianceScore   Float?
  aiValidationResult Json?
  validationNotes   String?
  
  // Report generation
  reportGenerated   Boolean @default(false)
  reportUrl         String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?

  // Relations
  equipment         Equipment @relation(fields: [equipmentId], references: [id])
  performedBy       User @relation(fields: [performedById], references: [id])

  @@map("calibration_records")
}

// Compliance templates for AI prompts
model ComplianceTemplate {
  id                String   @id @default(cuid())
  name              String
  description       String?
  equipmentType     EquipmentType
  template          String // AI prompt template
  variables         Json? // Template variables
  isActive          Boolean @default(true)
  version           String @default("1.0.0")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?

  // Relations
  laboratoryId      String?
  laboratory        Laboratory? @relation(fields: [laboratoryId], references: [id])

  @@map("compliance_templates")
}

// Compliance reports generated by AI
model ComplianceReport {
  id                String   @id @default(cuid())
  title             String
  description       String?
  reportType        ReportType
  status            ReportStatus @default(DRAFT)
  
  // Report content
  content           Json
  summary           String?
  recommendations   String?
  riskLevel         RiskLevel?
  
  // Metadata
  generatedAt       DateTime @default(now())
  expiresAt         DateTime?
  isPublic          Boolean @default(false)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?

  // Relations
  laboratoryId      String
  laboratory        Laboratory @relation(fields: [laboratoryId], references: [id])
  
  equipmentId       String?
  equipment         Equipment? @relation(fields: [equipmentId], references: [id])
  
  generatedById     String
  generatedBy       User @relation(fields: [generatedById], references: [id])

  @@map("compliance_reports")
}

// Subscription management
model Subscription {
  id                String   @id @default(cuid())
  laboratoryId      String
  plan              SubscriptionPlan
  status            SubscriptionStatus @default(ACTIVE)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd Boolean @default(false)
  canceledAt        DateTime?
  stripeCustomerId  String?
  stripeSubscriptionId String?
  stripePriceId     String?
  
  // Usage tracking
  complianceChecksUsed Int @default(0)
  complianceChecksLimit Int
  equipmentItemsUsed Int @default(0)
  equipmentItemsLimit Int
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?

  // Relations
  laboratory        Laboratory @relation(fields: [laboratoryId], references: [id])

  @@map("subscriptions")
}

// Usage tracking for billing
model UsageLog {
  id                String   @id @default(cuid())
  userId            String
  action            String
  resource          String?
  tokensUsed        Int?
  cost              Float?
  metadata          Json?
  createdAt         DateTime @default(now())

  // Relations
  user              User @relation(fields: [userId], references: [id])

  @@map("usage_logs")
}

// Notification system
model Notification {
  id                String   @id @default(cuid())
  userId            String
  type              NotificationType
  title             String
  message           String
  isRead            Boolean @default(false)
  priority          NotificationPriority @default(MEDIUM)
  scheduledAt       DateTime?
  sentAt            DateTime?
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

// Enums
enum UserRole {
  ADMIN
  SUPERVISOR
  TECHNICIAN
}

enum EquipmentType {
  ANALYTICAL_BALANCE
  CENTRIFUGE
  MICROSCOPE
  SPECTROPHOTOMETER
  PH_METER
  INCUBATOR
  AUTOCLAVE
  REFRIGERATOR
  FREEZER
  OTHER
}

enum EquipmentStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  RETIRED
}

enum ReportType {
  CALIBRATION
  COMPLIANCE
  AUDIT
  MAINTENANCE
  INCIDENT
}

enum ReportStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SubscriptionPlan {
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  TRIAL
}

enum NotificationType {
  CALIBRATION_DUE
  COMPLIANCE_FAILURE
  EQUIPMENT_MAINTENANCE
  SYSTEM_ALERT
  BILLING
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
} 