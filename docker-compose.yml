version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: labguard-postgres
    environment:
      POSTGRES_DB: labguard_pro
      POSTGRES_USER: labguard_user
      POSTGRES_PASSWORD: labguard_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - labguard-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: labguard-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - labguard-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: labguard-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://labguard_user:labguard_password@postgres:5432/labguard_pro
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - labguard-network
    command: npm run dev

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: labguard-frontend
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - labguard-network
    command: npm run dev

volumes:
  postgres_data:
  redis_data:

networks:
  labguard-network:
    driver: bridge 